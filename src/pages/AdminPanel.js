import { useState, useEffect } from "react";
import { supabase } from "../supabaseClient";

export default function AdminPanel({ onBack }) {
  const [activeTab, setActiveTab] = useState("sales");
  const [sales, setSales] = useState([]);
  const [products, setProducts] = useState([]);
  const [barcode, setBarcode] = useState("");
  const [newProduct, setNewProduct] = useState({ name: "", price: "" });

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
  const [step, setStep] = useState("barcode");
  const [foundProduct, setFoundProduct] = useState(null);
  const [form, setForm] = useState({
    barcode: "",
    name: "",
    price: "",
    sizes: { S: "", M: "", L: "" },
  });

  // –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    if (activeTab === "sales") fetchSales();
    if (activeTab === "products") fetchProducts();
    if (activeTab === "–¥–æ–±–∞–≤–∏—Ç—å") resetForm(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  }, [activeTab]);

  async function fetchNew() {
    if (!barcode.trim()) {
      // –ï—Å–ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—É—Å—Ç–æ–π ‚Üí —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      setFoundProduct(null);
      return;
    }
  
    const { data, error } = await supabase
      .from("products")
      .select("id, name, barcode, product_variants(size, quantity, price)")
      .eq("barcode", barcode)
      .maybeSingle();
  
    if (data) {
      setFoundProduct(data);
      setNewProduct({ name: "", price: "" }); // —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    } else {
      // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      setFoundProduct(null);
    }
  }
  
  async function saveNewProduct() {
    if (!barcode.trim() || !newProduct.name.trim() || !newProduct.price.trim()) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }
  
    // —Å–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä
    const { data, error } = await supabase
      .from("products")
      .insert([{ name: newProduct.name, barcode }])
      .select()
      .single();
  
    if (error) {
      console.error(error);
      return;
    }
  
    // —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞)
    await supabase.from("product_variants").insert([
      {
        product_id: data.id,
        size: "‚Äî", // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—á–µ—Ä–∫, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω
        quantity: 0,
        price: parseFloat(newProduct.price),
      },
    ]);
  
    setNewProduct({ name: "", price: "" });
    setBarcode("");
    fetchProducts(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
  }

  async function fetchSales() {
    const { data, error } = await supabase
      .from("sales")
      .select("*")
      .order("created_at", { ascending: false });
    if (!error) setSales(data);
  }

  async function fetchProducts() {
    const { data: products, error } = await supabase
      .from("products")
      .select("id, name, barcode, product_variants(id, size, quantity, price)")
      .order("id");
  
    if (!error) setProducts(products);
  }

  // —à–∞–≥–∏ "–¥–æ–±–∞–≤–∏—Ç—å"
  async function checkBarcode() {
    if (!form.barcode.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥");
      return;
    }
  
    const { data, error } = await supabase
      .from("products")
      .select("id, name, barcode")
      .eq("barcode", form.barcode)
      .maybeSingle();
  
    if (error) {
      console.error(error);
      return;
    }
  
    if (data) {
      setFoundProduct(data);
      setStep("stock");
    } else {
      setStep("details");
    }
  }

  async function registerProduct() {
    // —Å–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ —Å name –∏ barcode
    const { data, error } = await supabase
      .from("products")
      .insert([
        {
          name: form.name,
          barcode: form.barcode,
        },
      ])
      .select()
      .single();

    if (!error) {
      setFoundProduct(data);
      setStep("stock");
      fetchProducts();
    } else {
      console.error(error);
    }
  }

  async function addStock() {
    for (const [size, qty] of Object.entries(form.sizes)) {
      const quantity = parseInt(qty) || 0;
      if (quantity > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç
        const { data: existing } = await supabase
          .from("product_variants")
          .select("*")
          .eq("product_id", foundProduct.id)
          .eq("size", size)
          .maybeSingle();
  
        if (existing) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          await supabase
            .from("product_variants")
            .update({
              quantity: existing.quantity + quantity,
              price: parseFloat(form.price),
            })
            .eq("id", existing.id);
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
          await supabase.from("product_variants").insert([
            {
              product_id: foundProduct.id,
              size,
              quantity,
              price: parseFloat(form.price),
            },
          ]);
        }
      }
    }
  
    resetForm();
    fetchProducts();
  }

  function resetForm() {
    setForm({ barcode: "", name: "", price: "", sizes: { S: "", M: "", L: "" } });
    setStep("barcode");
    setFoundProduct(null);
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <button
          onClick={() => setActiveTab("sales")}
          className={activeTab === "sales" ? "active" : ""}
        >
          Sales
        </button>
        <button
          onClick={() => setActiveTab("products")}
          className={activeTab === "products" ? "active" : ""}
        >
          Products
        </button>
        <button
          onClick={() => setActiveTab("–¥–æ–±–∞–≤–∏—Ç—å")}
          className={activeTab === "–¥–æ–±–∞–≤–∏—Ç—å" ? "active" : ""}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å
        </button>
        <button onClick={onBack}>‚¨Ö –ù–∞–∑–∞–¥</button>
      </div>

      <div className="admin-content">
        {activeTab === "sales" && (
          <div>
            <h2>üìä Sales</h2>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>–ü—Ä–æ–¥–∞–≤–µ—Ü</th>
                  <th>–¢–æ–≤–∞—Ä</th>
                  <th>–®—Ç—Ä–∏—Ö-–∫–æ–¥</th>
                  <th>–†–∞–∑–º–µ—Ä</th>
                  <th>–ö–æ–ª-–≤–æ</th>
                  <th>–¶–µ–Ω–∞</th>
                  <th>–î–∞—Ç–∞</th>
                </tr>
              </thead>
              <tbody>
                {sales.map((s) => (
                  <tr key={s.id}>
                    <td>{s.id}</td>
                    <td>{s.seller_id}</td>
                    <td>{s.product}</td>
                    <td>{s.barcode}</td>
                    <td>{s.size}</td>
                    <td>{s.quantity}</td>
                    <td>{s.price} ‚Ç∏</td>
                    <td>{new Date(s.created_at).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

{activeTab === "products" && (
  <div>
    <h2>üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h2>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
          <th>–®—Ç—Ä–∏—Ö-–∫–æ–¥</th>
          <th>–†–∞–∑–º–µ—Ä</th>
          <th>–û—Å—Ç–∞—Ç–æ–∫</th>
          <th>–¶–µ–Ω–∞</th>
        </tr>
      </thead>
      <tbody>
        {products.map((p) =>
          p.product_variants.map((v) => (
            <tr key={v.id}>
              <td>{p.id}</td>
              <td>{p.name}</td>
              <td>{p.barcode}</td>
              <td>{v.size}</td>
              <td>{v.quantity}</td>
              <td>{v.price} ‚Ç∏</td>
            </tr>
          ))
        )}
      </tbody>
    </table>
  </div>
)}

{activeTab === "–¥–æ–±–∞–≤–∏—Ç—å" && (
  <div>
    <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h2>

    {step === "barcode" && (
      <div>
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥"
          value={form.barcode}
          onChange={(e) => setForm({ ...form, barcode: e.target.value })}
        />
        <button onClick={checkBarcode}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
      </div>
    )}

    {step === "details" && (
      <div>
        <h3>–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä</h3>
        <input
          type="text"
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
          value={form.name}
          onChange={(e) => setForm({ ...form, name: e.target.value })}
        />
        <input
          type="number"
          placeholder="–¶–µ–Ω–∞"
          value={form.price}
          onChange={(e) => setForm({ ...form, price: e.target.value })}
        />
        <button onClick={registerProduct}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
        <button onClick={resetForm}>–û—Ç–º–µ–Ω–∞</button>
      </div>
    )}

    {step === "stock" && (
      <div>
        <h3>{foundProduct?.name}</h3>
        <p>–®—Ç—Ä–∏—Ö-–∫–æ–¥: {form.barcode}</p>
        <p>
          –¶–µ–Ω–∞:{" "}
          <input
            type="number"
            value={form.price}
            onChange={(e) =>
              setForm({ ...form, price: e.target.value })
            }
          />{" "}
          ‚Ç∏
        </p>

        <h4>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:</h4>
        <div>
          <label>S: </label>
          <input
            type="number"
            value={form.sizes.S}
            onChange={(e) =>
              setForm({
                ...form,
                sizes: { ...form.sizes, S: e.target.value },
              })
            }
          />
        </div>
        <div>
          <label>M: </label>
          <input
            type="number"
            value={form.sizes.M}
            onChange={(e) =>
              setForm({
                ...form,
                sizes: { ...form.sizes, M: e.target.value },
              })
            }
          />
        </div>
        <div>
          <label>L: </label>
          <input
            type="number"
            value={form.sizes.L}
            onChange={(e) =>
              setForm({
                ...form,
                sizes: { ...form.sizes, L: e.target.value },
              })
            }
          />
        </div>

        <button onClick={addStock}>–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥</button>
        <button onClick={resetForm}>–û—Ç–º–µ–Ω–∞</button>
      </div>
    )}
  </div>
)}
      </div>
    </div>
  );
}