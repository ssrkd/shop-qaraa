const fetch = require('node-fetch');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || '8363449094:AAHpdTNzz4mdtG49_2ldhx_uT3WTzeoz7xA';
const OWNER_CHAT_ID = process.env.OWNER_CHAT_ID || '996317285';
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
async function sendTelegramMessage(chatId, text, options = {}) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    })
  });

  return response.json();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Supabase
async function saveMessage(fromUserId, fromUsername, toUserId, message) {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/telegram_messages`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'apikey': SUPABASE_KEY,
      'Authorization': `Bearer ${SUPABASE_KEY}`,
      'Prefer': 'return=minimal'
    },
    body: JSON.stringify({
      from_user_id: fromUserId,
      from_username: fromUsername,
      to_user_id: toUserId,
      message: message,
      read: false
    })
  });

  return response.ok;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ username –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ chat_id
async function getSellerUsername(chatId) {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/login?telegram_chat_id=eq.${chatId}&select=username,fullname`, {
    headers: {
      'apikey': SUPABASE_KEY,
      'Authorization': `Bearer ${SUPABASE_KEY}`
    }
  });

  const data = await response.json();
  return data && data.length > 0 ? data[0] : null;
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
module.exports = async (req, res) => {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true });
  }

  try {
    const update = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!update.message || !update.message.text) {
      return res.status(200).json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id.toString();
    const text = message.text;
    const username = message.from.username || 'unknown';

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} (${chatId}): ${text}`);

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (text === '/start') {
      const seller = await getSellerUsername(chatId);
      
      if (seller) {
        await sendTelegramMessage(chatId, 
          `üëã –ü—Ä–∏–≤–µ—Ç, ${seller.fullname}!\n\n` +
          `–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n` +
          `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!`
        );
      } else {
        await sendTelegramMessage(chatId,
          `üëã –ü—Ä–∏–≤–µ—Ç!\n\n` +
          `–¢–≤–æ–π chat_id: <code>${chatId}</code>\n\n` +
          `–ü–µ—Ä–µ–¥–∞–π —ç—Ç–æ—Ç ID –≤–ª–∞–¥–µ–ª—å—Ü—É, —á—Ç–æ–±—ã –æ–Ω –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º—É.`
        );
      }
      
      return res.status(200).json({ ok: true });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if (chatId === OWNER_CHAT_ID && message.reply_to_message) {
      const replyToText = message.reply_to_message.text;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const match = replyToText.match(/chat_id: (\d+)/);
      if (match) {
        const sellerChatId = match[1];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        await sendTelegramMessage(sellerChatId, 
          `üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b>\n\n${text}`
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await saveMessage(OWNER_CHAT_ID, 'owner', sellerChatId, text);
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        await sendTelegramMessage(OWNER_CHAT_ID, 
          `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!`
        );
        
        return res.status(200).json({ ok: true });
      }
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
    if (chatId !== OWNER_CHAT_ID) {
      const seller = await getSellerUsername(chatId);
      
      if (!seller) {
        await sendTelegramMessage(chatId,
          `‚ùå –¢–≤–æ–π chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
          `–¢–≤–æ–π chat_id: <code>${chatId}</code>\n\n` +
          `–ü–µ—Ä–µ–¥–∞–π –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.`
        );
        return res.status(200).json({ ok: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
      await saveMessage(chatId, seller.username, OWNER_CHAT_ID, text);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
      await sendTelegramMessage(OWNER_CHAT_ID,
        `üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞!</b>\n\n` +
        `üë§ <b>${seller.fullname}</b> (@${seller.username})\n` +
        `üí¨ ${text}\n\n` +
        `<i>chat_id: ${chatId}</i>\n\n` +
        `<i>–ù–∞–∂–º–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É</i>`
      );

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
      await sendTelegramMessage(chatId,
        `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!`
      );

      return res.status(200).json({ ok: true });
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ–∑ reply (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if (chatId === OWNER_CHAT_ID) {
      await sendTelegramMessage(OWNER_CHAT_ID,
        `üí° –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É, –Ω–∞–∂–º–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–∏.`
      );
      return res.status(200).json({ ok: true });
    }

    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    return res.status(200).json({ ok: true, error: error.message });
  }
};

